buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id('checkstyle')
  id('java-gradle-plugin')

  id('com.gradle.plugin-publish') version '1.2.1'
  id('io.github.joselion.pretty-jupiter') version '3.0.1'
  id('io.github.joselion.strict-null-check') version '3.1.0'
  id('name.remal.sonarlint') version '3.3.12'
}

group = 'io.github.joselion'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(20)
    vendor = JvmVendorSpec.ORACLE
  }
}

javadoc {
  options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
  options.deprecation = true
}

dependencyLocking {
  lockAllConfigurations()
}

checkstyle {
  setToolVersion(libs.versions.checkstyle.get())
}

sonarLint {
  setToolVersion(libs.versions.sonarlint.core.get())
  languages {
    include('java')
  }
  rules {
    enable(
      'java:S4266', // "Stream.collect()" calls should not be redundant
    )
    disable(
      'java:S107', // Allow constructors with more than 7 parameters
      'java:S3776', // Allow methods with more than 15 lines
      'java:S4032', // Allow packages only containing `package-info.java`
    )
  }
}

strictNullCheck {
  addEclipse()
  packageInfo.useEclipse()
}

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor(libs.lombok)
  compileOnly(libs.lombok)
  sonarlintCorePlugins(libs.sonarlint.java)
  constraints {
    sonarlintCore(libs.tomcat.jasper) {
      because('version 9.0.75 has a security vulnerability')
    }
  }

  implementation(localGroovy())
  implementation(libs.maybe)
}

testing {
  suites {
    configureEach {
      useJUnitJupiter(libs.versions.junit.get())

      dependencies {
        annotationProcessor(libs.lombok)
        compileOnly(libs.lombok)

        implementation(libs.assertj)
        implementation(libs.mockito)
      }
    }

    testkit(JvmTestSuite) {
      dependencies {
        implementation(gradleTestKit())
      }

      targets {
        configureEach {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }
  }
}

prettyJupiter {
  failure {
    maxMessageLines = 30
  }
  duration {
    customThreshold = [testkit: 1000]
  }
}

gradlePlugin {
  website = 'https://github.com/JoseLion/strict-null-check'
  vcsUrl = 'https://github.com/JoseLion/strict-null-check'

  plugins {
    strictNullCheck {
      id = 'io.github.joselion.strict-null-check'
      implementationClass = 'io.github.joselion.strictnullcheck.StrictNullCheckPlugin'
      displayName = 'Strict Null Check Plugin'
      description = 'A Gradle plugin to add full Strict Null Check to your Java code'
      tags.set([
        'nullability',
        'strict-null',
        'nonnull',
        'null-check',
        'non-null-by-default',
        'package-info-generation',
        'sonarlint'
      ])
    }
  }

  testSourceSets(sourceSets.testkit)
}

task preparePublish() {
  doLast {
    def publishKey = findProperty('gradlePublishKey')
    def publishSecret = findProperty('gradlePublishSecret')

    System.properties.setProperty('gradle.publish.key', publishKey)
    System.properties.setProperty('gradle.publish.secret', publishSecret)
  }
}

tasks.named('check') {
  dependsOn(testing.suites.testkit)
}

tasks.named('publishPlugins') {
  dependsOn(tasks.preparePublish)
}
